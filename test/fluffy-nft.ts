import { loadFixture } from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { ethers } from "hardhat";
import { expect } from "chai";

describe("FluffyFuryNFT", function () {
  // function to deploy NFT in test environment
  async function deployNFT() {
    const NFT = await ethers.getContractFactory("FluffyFury");

    const [owner, addr1, addr2, addr3, addr4] = await ethers.getSigners();

    const svg = `<?xml version="1.0" encoding="utf-8"?><svg width="800px" height="800px" viewBox="0 0 1024 1024" class="icon"  version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 700.6c14.5 135.5 132.6 241.1 276 241.1s261.5-105.6 276-241.1h-552z" fill="#F9C0C0" /><path d="M512 957.3c-79.6 0-154.5-28.7-210.8-80.8-56.5-52.2-87.6-121.7-87.6-195.7 0-59.7 20.2-116.5 58.4-164.3 36.2-45.3 85.4-78.8 142.6-97.1V206.1h-46.1c-11.2 0-20.4-9.1-20.4-20.4v-17.1c0-11.2 9.1-20.4 20.4-20.4h287.2c11.2 0 20.4 9.1 20.4 20.4v17.1c0 11.2-9.1 20.4-20.4 20.4h-46.1v213.4c57.1 18.3 106.3 51.8 142.6 97.1 38.2 47.8 58.4 104.6 58.4 164.3 0 74-31.1 143.5-87.6 195.7-56.5 52-131.4 80.7-211 80.7zM368.4 163.2c-3 0-5.4 2.4-5.4 5.4v17.1c0 3 2.4 5.4 5.4 5.4h61.1v239.5l-5.3 1.6c-56.5 17-105.1 49.4-140.5 93.7-36 45.1-55.1 98.7-55.1 154.9 0 69.7 29.4 135.3 82.8 184.7C365 915 436.2 942.3 512 942.3s147.1-27.3 200.6-76.8c53.4-49.4 82.8-115 82.8-184.7 0-56.2-19-109.8-55.1-154.9-35.4-44.4-84-76.8-140.5-93.7l-5.3-1.6V191.1h61.1c3 0 5.4-2.4 5.4-5.4v-17.1c0-3-2.4-5.4-5.4-5.4H368.4z" fill="#999999" /><path d="M220.7 676.8h581.9v8H220.7zM413 190.8h39.6v8H413zM495.5 190.8h106.1v8H495.5z" fill="#999999" /><path d="M452.7 645.7c-14 0-25.4-11.4-25.4-25.4s11.4-25.4 25.4-25.4 25.4 11.4 25.4 25.4-11.4 25.4-25.4 25.4z m0-42.9c-9.6 0-17.4 7.8-17.4 17.4s7.8 17.4 17.4 17.4 17.4-7.8 17.4-17.4-7.8-17.4-17.4-17.4zM571.6 556.8c-27.6 0-50.1-22.5-50.1-50.1s22.5-50.1 50.1-50.1 50.1 22.5 50.1 50.1-22.5 50.1-50.1 50.1z m0-92.2c-23.2 0-42.1 18.9-42.1 42.1s18.9 42.1 42.1 42.1 42.1-18.9 42.1-42.1-18.9-42.1-42.1-42.1zM491.2 316.7c-17 0-30.8-13.8-30.8-30.8s13.8-30.8 30.8-30.8 30.8 13.8 30.8 30.8-13.8 30.8-30.8 30.8z m0-53.6c-12.6 0-22.8 10.2-22.8 22.8s10.2 22.8 22.8 22.8c12.6 0 22.8-10.2 22.8-22.8s-10.2-22.8-22.8-22.8zM543.2 113.1c-12 0-21.7-9.7-21.7-21.7s9.7-21.7 21.7-21.7 21.7 9.7 21.7 21.7-9.7 21.7-21.7 21.7z m0-35.4c-7.5 0-13.7 6.1-13.7 13.7s6.1 13.7 13.7 13.7 13.7-6.1 13.7-13.7-6.1-13.7-13.7-13.7z" fill="#CE0202" /></svg>`;

    const nft = await NFT.deploy(svg);

    return { nft, svg, owner, addr1, addr2, addr3, addr4 };
  }

  describe("Deployment", function () {
    it("was deployed successfully", async function () {
      const { nft, owner, svg } = await loadFixture(deployNFT);

      expect(await nft.owner()).to.be.equal(owner);
      expect(await nft.svgData()).to.be.equal(svg);
      expect(await nft.name()).to.be.equal("FluffyFury");
      expect(await nft.symbol()).to.be.equal("FFY");
    });
  });

  describe("mint", function () {
    it("mints an nft to the specified addresses", async function () {
      const { nft, owner, addr1 } = await loadFixture(deployNFT);

      const previousOwnerBalance = await nft.balanceOf(owner);
      const previousAddr1Balance = await nft.balanceOf(addr1);

      await nft.mint({ value: ethers.parseEther("0.0001") });
      await nft.connect(addr1).mint({ value: ethers.parseEther("0.0001") });

      const newOwnerBalance = await nft.balanceOf(owner);
      const newAddr1Balance = await nft.balanceOf(addr1);

      expect(newOwnerBalance).to.be.greaterThan(previousOwnerBalance);
      expect(newAddr1Balance).to.be.greaterThanOrEqual(previousAddr1Balance);
    });

    it(" reverts if ether is not passed to mint function", async function () {
      const { nft } = await loadFixture(deployNFT);

      expect(nft.mint()).to.be.revertedWith("0.0001 ether required to mint");
    });
  });

  describe("withdraw funds", function () {
    it("reverts if there are no funds in the contract", async function () {
      const { nft } = await loadFixture(deployNFT);

      expect(nft.withdrawFunds()).to.be.revertedWith("No funds available");
    });

    it("reverts if non-owner calls the contract", async function () {
      const { nft, addr1 } = await loadFixture(deployNFT);

      expect(nft.connect(addr1).withdrawFunds()).to.be.revertedWithCustomError(
        nft,
        "OwnableUnauthorizedAccount"
      );;
    });

    it("withdraws funds to the owner's address", async function () {
      const { nft, owner, addr1 } = await loadFixture(deployNFT);

      await nft.mint({ value: ethers.parseEther("0.0001") });
      await nft.connect(addr1).mint({ value: ethers.parseEther("0.0001") });

      const contractBalance = await ethers.provider.getBalance(nft);
      const previousOwnerBalance = await ethers.provider.getBalance(owner);

      const tx = await nft.withdrawFunds();
      const txReceipt = await tx.wait();

      const gasUsed = txReceipt!.cumulativeGasUsed;
      const effectiveGasPrice = txReceipt!.gasPrice;
      const gasCost = gasUsed * effectiveGasPrice;

      const newOwnerBalance = await ethers.provider.getBalance(owner);

      expect(newOwnerBalance).to.be.equal(
        previousOwnerBalance - gasCost + contractBalance
      );
    });
  });

  describe("updateSvg", function () {
    it("should revert if a non owner call the updateSvg function", async function () {
      const { nft, addr1 } = await loadFixture(deployNFT);

      const svg = `<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="lightblue" />
                    <circle cx="50" cy="50" r="30" fill="red" /><rect x="100" y="100" width="50" height="50" fill="green" />
                    <line x1="0" y1="200" x2="200" y2="0" stroke="black" stroke-width="2" /></svg>`;

      expect(nft.connect(addr1).updateSVG(svg)).to.be.revertedWithCustomError(
        nft,
        "OwnableUnauthorizedAccount"
      );
    });

    it("should revert if an empty string is passed", async function () {
      const { nft, addr1 } = await loadFixture(deployNFT);
      expect(nft.updateSVG("")).to.be.revertedWith("SVG data cannot be empty");
    });

    it("should revert if the svg is greater than 5000 characters", async function () {
      const { nft, addr1 } = await loadFixture(deployNFT);

      const svg = `
<svg xmlns="http://www.w3.org/2000/svg" width="1280" height="1280"><path d="M0 0h1280v1280H0V0Z" fill="#72544C"/><path d="M0 0h1280v720h-8v-2h-5l-1 2-2-1 1-2-5-1v-2l-1.715-.332-2.223-.48-2.214-.458L1252 712l-1-3 3.375-.938c3.42-.885 3.42-.885 5.625-2.062-4.246-1.096-7.96-.929-12.313-.563l-3.8.31L1241 706l1 5-7 2c-1.708-1.634-2.935-2.87-4-5-2.017-1.134-2.017-1.134-4-2l-1.14 1.36c-4.1 3.616-10.776 5.599-16.204 5.671-1.906-.281-1.906-.281-4.656-1.031v-2l-2.336 1.313-3.039 1.687-3.023 1.688C1194 716 1194 716 1192 716l-2 4-1-5-2.625 1.063c-3.623 1.006-5.76.798-9.375-.063l1-4h3v-2c-7.043.38-13.853.787-20.7 2.527-3.892.8-7.836.98-11.796 1.227-2.5.095-2.5.095-4.504 1.246-2.672.134-5.323.043-8 0v2h-4v-2l-2 1c-2.333.04-4.667.043-7 0v2h-4c.506-2.169 1-4 2-6h-24l-2-4h-3l-.586-3.473-.789-4.59-.383-2.279c-.807-4.664-1.86-9.13-3.242-13.658h-2c-2.576-7.323-3.614-14.258-4-22h-2c-1.354-2.709-1.065-5.01-1-8h3c-.575-3.93-.575-3.93-3-7v-3h-2l-1-7 3-1 1-3-2.75.125c-3.25-.125-3.25-.125-5.125-1.094-2.52-1.223-4.59-1.436-7.375-1.656l-2.703-.227L1059 630l.563 3.375C1060 637 1060 637 1059 639h-2c-1.691-2.152-1.691-2.152-3.563-4.938-2.032-3.18-2.032-3.18-4.437-6.062a99.984 99.984 0 0 1 0-5h2l.813-2.688C1053 617 1053 617 1054.563 614.5c1.636-2.846 1.926-5.287 2.437-8.5l2-1c.449-3.94.449-3.94-1.75-5.922l-2.25-1.828-2.25-1.86L1051 594c.875-3.875.875-3.875 2-5l-2-1v-2h3v-4l-6-1-.375-2.375c-.416-2.766-.416-2.766-2.625-4.625v-3l5-1c-.229-1.462-.484-2.92-.75-4.375l-.422-2.46c-.632-2.334-.632-2.334-2.844-3.325L1044 559l-1-2.063c-.83-2.15-.83-2.15-3.125-2.687L1038 554l.496 2.105c.545 3.13.601 6.033.566 9.207l-.027 3.239L1039 571h-3l2 2.375c2 2.625 2 2.625 2 4.625h3v2h-2v3h-7l1-5h-3v3h-2c1.05 6.736 2.784 11.996 6 18v2l1.762.793c3.735 2.014 6.71 4.803 9.238 8.207-.063 2.938-.063 2.938-1 5l-3 1c.114 2.563.241 5.125.375 7.688l.094 2.185c.226 4.13.769 7.328 2.531 11.127 1.683 5.008 3.04 9.98 3.938 15.188.863 4.658 2.577 7.803 5.062 11.812.35 1.33.691 2.66 1 4l2 1a178.472 178.472 0 0 1 2.75 7.563c1.989 5.604 4.003 10.315 7.953 14.859 3.056 3.719 3.612 6.795 3.672 11.578l.086 3.125c-.578 3.606-1.543 4.73-4.461 6.875-2.36.61-2.36.61-4.75.75l-2.422.172L1059 714l1-5 4-1v-2h2v-2h-17c-1.68-1.68-1.247-3.879-1.375-6.188-.526-12.315-.526-12.315-5.625-22.812-.09-2.54-.09-2.54.063-5.625.114-5.587-.734-9.328-3.063-14.375a75.56 75.56 0 0 0 1 14h-4v-2l-3-1v-2h2l-1-6-6 1 .438 3.875c.08.72.162 1.439.246 2.18.229 2.019.229 2.019 1.316 3.945l3 1 .684 6.152c.135 1.86.135 1.86 1.316 2.848.04 2.333.042 4.667 0 7-3.165-2.728-4.527-5.208-6.1-9.027-1.608-3.526-3.742-6.722-5.838-9.973a968.17 968.17 0 0 1-5.062-8l-1.135-1.81c-2.395-3.979-3.78-7.766-4.928-12.253-.914-3.55-1.803-6.67-3.457-9.949-1.61-3.25-2.375-6.19-3.105-9.738l-.766-3.7c-.526-3.069-.816-6.008-.984-9.112-.253-3.41-.759-5.12-3.188-7.563L998 603v4h-2l1.063 3.688c.872 3.433 1.014 5.865-.063 9.312-3.325 1.108-5.622.845-9 0v3l3 1 1 8h-3l-1-7h-2l1 3-4-1 4 5h-2l1 9c-5.529-1.382-6.94-4.41-10-9v-3h2l-.375-3.563c-.05-4.712 1.888-6.895 5.063-10.187L984 614h-4v-2h-2l-.375 2.563C977 618 977 618 975.875 621.313c-1.184 4.99-1.357 9.868 1.09 14.523.97 1.417 2 2.794 3.035 4.164v2h2l2 6h-2c-3.417-4.515-5.97-9.525-8.633-14.512-1.394-2.62-1.394-2.62-3.367-5.488v-4h-2l-1-8h-3l-.113-2.563c-.394-6.794-1.226-12.19-3.887-18.437v-3h3l2 7 2.375-.063C970 599 970 599 972 600v-2l-2-1 1-4v3h2v-4h3l-1-5 3 1a70.134 70.134 0 0 1 1 4l2 1v4l2-2 3 3 2-1c-.659-4.72-1.326-9.047-4.5-12.75-3.014-4.521-3.547-9.788-3.375-15.125.23-7.674-4.092-15.23-7.125-22.125a605.18 605.18 0 0 1-2-5h-2c-2.26 2.673-2.26 2.673-1.742 4.922a74.29 74.29 0 0 0 2.617 6.328c2.92 6.452 5.274 12.916 7.125 19.75l-3 1c-3.64-3.924-4.716-7.012-5.625-12.25A116.195 116.195 0 0 0 967 555l-2-1v-2l-4-1 .25-2.375c-.39-5.659-2.666-10.819-5.445-15.742C955 531 955 531 956 528h1v-5h-2l-1 3v-2h-2v-4h2v-12h-2l-.875-2.813c-1.013-3.285-1.013-3.285-3.125-6.187-.137-2.758.003-5.453.125-8.21-.135-3.005-.864-5.08-2.125-7.79h-2l2-6h3c-3.508-1.604-6.144-2.22-10-2v-2h-3v-5c9.226-4.777 9.226-4.777 15-3 1.217-1.765 1.217-1.765 2-4-.783-2.235-.783-2.235-2-4l-1.813 1.063C947 459 947 459 944 458v3c-11.522.369-11.522.369-17-2-1.347-7.472-1.347-7.472.172-9.781 2.484-1.656 3.847-1.341 6.765-.906 3.121.437 5.886.687 9.063.687a381.113 381.113 0 0 0 6-5h3l-2-2c.375-2.625.375-2.625 1-5h2l1 3 1.125-1.438c3.19-2.659 6.849-2.562 10.875-2.562 1.688-1.438 1.688-1.438 3-3-1.663-1.663-3.783-1.36-6.063-1.563l-2.785-.253L958 431v-5l-5 1-1-5c2.25-1.563 2.25-1.563 5-3l2.063.563L961 420a90.576 90.576 0 0 0 4-4h3v-4h-8v-3l2-1v-2l-2.938.5c-5.377.767-10.87 1.23-16.062-.5v-3h-3v-5l8-1-1-7-8 1-1 3h-9l1-4h3v-2h3v-2h-10v-4l-10 2v2c-5.387.353-5.387.353-8 0-1.75-2-1.75-2-3-4h-4c.108 2.439.108 2.439 1 5 2.266 1.396 2.266 1.396 5 2.313 2.777 1.238 2.777 1.238 5 2.687.627 2.123.563 3.874.55 6.078.283 2.102.283 2.102 2.305 3.406 2.353 1.244 4.735 2.389 7.145 3.516 4.417 2.88 6.713 5.897 8 11 .515 3.994.808 7.978 1 12 2.473-.344 2.473-.344 5-1l1-2h6v-2h3l1 12c-5.658 0-6.758-.005-11-3v4l-3.063.313c-3.417.596-5.8 1.543-8.902 2.984-4.153 1.435-8.662 1.674-13.035 1.703l-2-1c.233 5.715 1.604 8.275 5.625 12.324C916 454 916 454 916.496 456.066c.857 3.29 3.725 4.278 6.504 5.934-.337 3.12-.621 4.621-2.875 6.875L918 470l-3-1v2h-4v-2l-4-1v2l-6-1 .84 2.45 1.097 3.238 1.09 3.199c2.319 7.421 2.319 7.421.973 10.113h-4l.367 2.098A405.836 405.836 0 0 1 904 507.75c.997 7.738.997 7.738 3 15.25l3 1-1 9 4 2 3 4 2 .813c3.178 1.887 3.724 4.824 5 8.187.653 1.34 1.312 2.677 2 4l-5 5 2 1v3l-1.773.254c-3.848 1.29-5.452 4.097-7.676 7.36-3.068 6.7-3.163 14.11-3.551 21.386h-1l-1-13-7 3v2l-4-2v-2c-6.028.476-10.767 3.197-16 6l-1-1c-3.663-.136-6.506-.165-10 1l-2.438-.563c-2.529-.7-2.529-.7-4.437.563-3.181 1.497-5.76.647-9.125 0 2.176-3.414 3.693-4.576 7.605-5.563l2.733-.726 2.85-.711c6.749-1.72 12.681-3.657 18.812-7-.185-4.342-.185-4.342-2-8v8h-5v2l-5-1c-1.125-5.625-1.125-5.625 0-9-.221-4.055-.407-6.299-3.063-9.438L868 551l-2 5-3-1-1-6v12h1l.148 3.027.227 3.91.21 3.903c.138 1.043.274 2.086.415 3.16l2 1h-6c-.6-3.357-1.099-6.705-1.465-10.094l-.236-2.183a856.767 856.767 0 0 1-.461-4.446c-.477-4.338-1.295-8.162-2.838-12.277-1-3-1-3-1.313-5.063L853 540l-1.965-.73C849 538 849 538 848.172 535.297l-.422-3.547-.232-1.94c-.746-7.17-.65-14.371-.533-21.57l.042-2.76.055-2.471c.053-2.082.053-2.082-1.082-4.009-.172-3.86.175-7.241 1-11 .344-2.332.68-4.665 1-7l-4-1v-8h-1l-.148-3.07-.227-4.055c-.03-.665-.062-1.33-.094-2.016-.187-3.183-.553-5.926-1.566-8.957-1.082-3.253-1.134-5.8-1.028-9.214.054-1.896.084-3.792.063-5.688l-1-1a235.648 235.648 0 0 1-1-7l-1.563 1.875c-3.027 2.64-5.564 3.14-9.437 4.125-3.817 1.04-3.817 1.04-7 3-1.39 3.49-1.39 3.49-2 7l-2 2 5-1c2 3 2 3 2 6-1.5 1.688-1.5 1.688-3 3l4 2v6l-2 1-3-3-1 7-3 1c-.733 2.015-.733 2.015-1 4h-2v3l-2.48 1.238L807 481c-.606 3.424-.606 3.424-.313 7.188l.137 3.855L807 495h1l.148 2.668.227 3.52c.07 1.148.14 2.297.21 3.48.259 3.25.259 3.25 1.411 5.781 1.339 3.401 1.473 6.536 1.692 10.176l.261 3.977C812 528 812 528 811 531l-3.438 1.438c-3.571 1.18-3.571 1.18-4.875 3.562l-.687 2-2 3c1.985-.267 1.985-.267 4-1l1-3 5 1 2-4c1.938.688 1.938.688 4 2 .75 2.625.75 2.625 1 5l-2 1-2-1c1.877 1.93 1.877 1.93 3.523 3.297 4.249 4.9 4.692 13.424 5.477 19.703l1 3c.178 2.693.087 5.294 0 8l-1 1c-.377 4.561-.377 4.561.973 8.809 2.15 4.588 1.73 10.228 2.027 15.191h17v-2l3.438.5c4.533.576 9 .595 13.562.5v3l-1.563 1.25c-1.842 1.827-1.842 1.827-1.125 5.25L857 612c0 3 0 3-1 5h-4l-.563 1.938C850 621 850 621 846.5 621.688L843 622l-2 1c-2.516-.175-4.992-.515-7.492-.844-2.473-.154-4.144.207-6.508.844a128.624 128.624 0 0 1-6-1h-3l-2 2c-2.164.195-2.164.195-4.625.125l-2.477-.055L807 624l-1-2 3-1a730.672 730.672 0 0 0-6.875-.125l-3.867-.07c-3.344-.161-3.344-.161-5.258 2.195a86.53 86.53 0 0 1-7.5.188l-2.09-.002c-5.129-.045-5.129-.045-7.41-1.186-2-.043-4-.04-6 0-2.313 0-4.626-.052-6.938-.125-3.193-.012-5.339.31-8.062 2.125l-1-3c-.652.095-1.305.19-1.977.29-5.177.656-9.177 1.071-14.023-1.29l-1-2-2.188 1.625L732 621c-1.673-.65-3.339-1.32-5-2-2.66-.203-2.66-.203-5.375-.063-4.36.089-8.338-.175-12.625-.937v-1h15l-1-5h-8l-1 3h-3l-.438-2.813c-.483-3.194-.483-3.194-1.562-6.187h5v3c2.473-.344 2.473-.344 5-1l1-2h3l-1-3c-9.58-1.04-19.118-2.021-28.75-2.375-10.27-.41-20.428-1.801-30.606-3.166-7.621-1.008-15.167-1.781-22.84-2.213C637 595 637 595 634 594c-2.393-.226-4.79-.408-7.188-.563l-3.855-.253L620 593l-1 2-1-2c-2.435-.664-2.435-.664-5.375-1.063l-3.29-.503c-3.028-.394-6.041-.691-9.085-.934-3.917-.314-7.48-.973-11.258-2.023-3.61-.864-7.3-1.152-10.992-1.477v2h6v1h-5v2h9v2h6l1-2 1.375 2.5L598 597h2v-3h-2v-2c10.558.779 10.558.779 15 3v3l-8 1-2 6 1.723.184A361.63 361.63 0 0 1 619 607l1-2 1 2 2.375.375c2.625.625 2.625.625 4.438 2.688L629 612l-3 6h-4l2 1v2c9.363.792 9.363.792 18.75 1 3.25 0 3.25 0 5.25 1l3-1c1.342.297 2.675.634 4 1 1.586.142 3.175.245 4.766.316l2.695.127 2.789.12 2.836.13c2.304.106 4.61.208 6.914.307l2 6-2 2c7.513 2.892 13.924 4.643 22 4v1c2.542.169 5.083.335 7.625.5l2.16.145c4.08.262 8.124.407 12.215.355l1 2h-19c9.662 1.169 19.292 2.29 29 3l-8-2v-1a94.768 94.768 0 0 1 15.688 1c7.131.982 14.108 1.222 21.312 1v2l2.852-.035 3.773-.028 3.727-.035c3.648.098 3.648.098 6.441.57 5.545.912 11.163.928 16.771 1.133l2.76.114 2.503.092C800 646 800 646 803 647c2.583.39 5.158.743 7.75 1.063l2.094.275c4.422.553 8.7.75 13.156.662-1.813 2.5-1.813 2.5-4 5h-3v-2a559.991 559.991 0 0 0-4.313-.063l-2.425-.035c-2.43.001-2.43.001-5.262 1.098v3h-3l-1-2c-3.03-.658-3.03-.658-6-1l1-5-2.25 1.438c-4.188 2.379-7.107 2.714-11.875 2.187l-2.633-.273C779 651 779 651 777 650v6l13 2-1 3-1.836-.219c-10.298-1.631-10.298-1.631-20.164.219v-2l-2.688.5c-2.848.43-5.442.584-8.312.5l1-6 1 2 2-1v-6h-6l1 6c-6.656 1.238-13.247 1.091-20 1v-2h-5l-1-6a664.623 664.623 0 0 0-4.313-1.5l-2.425-.844c-2.35-.795-2.35-.795-5.262-.656l1 4-4 2 1-3-7 1 2 2-4 2-2-4h2l-1-3c-7.381-1.659-7.381-1.659-14.875-1.438-3.862.541-5.008-.371-8.125-2.562-2.191-.696-2.191-.696-4-1l1 3 2 1 2 1 1 3c-3.653 2.634-6.485 4.469-11 5l-1 4 2 1v3c3.963.197 3.963.197 7.438-1.063 3.48-.915 5.211-1.12 8.562.063l1 2c2.633.92 2.633.92 5.75 1.625 1.047.26 2.093.52 3.172.79 4.31.82 7.871.831 12.078-.415l-1 3c-9.886.386-19.044-.622-28-5v2c-16.708.369-16.708.369-25-2v-3h-4v2c-10.6.223-21.058-.017-31.625-.938l-3.07-.263c-7.172-.666-7.172-.666-8.305-1.799a66.935 66.935 0 0 0-4.254-.316l-2.588-.127-2.72-.12-2.733-.13c-2.235-.107-4.47-.209-6.705-.307v-3h-4v2c-5.458.111-10.615-.083-16-1v-2h2l-1-7-6-2 1 10c-27.298.383-27.298.383-38-2v-2h4v-2h-6l1 3c-10.548.253-20.881-.545-31.375-1.5-2.408-.216-4.817-.43-7.225-.642a991.6 991.6 0 0 1-4.452-.4c-4.329-.384-8.602-.605-12.948-.458l-1 1c-2.02.072-4.042.084-6.063.063l-3.347-.028L460 650v3c1.603.196 3.208.381 4.813.563l2.707.316c2.614.278 2.614.278 5.48-.879l1-3c18.037.844 35.937 2.063 53.862 4.267 12.08 1.48 24.126 2.452 36.281 3.05 5.917.312 11.26.68 16.857 2.683l-2 2c-3.625-.375-3.625-.375-7-1v4l3.938.375c2.214.21 2.214.21 4.062.625l1 2h-8v3l2.09-.035c6.068-.058 11.894.246 17.91 1.035v-3h-11v-3l7-1 1-3h-7v-2c9.408-.116 18.737.206 28.125.813l2.033.128c11.072.714 21.944 1.977 32.842 4.059v1l-5.957.39c-2.74.818-3.545 2.247-5.043 4.61l3.164.148A691.2 691.2 0 0 1 665 673l2.913.251 2.712.249 2.414.219C675 674 675 674 677 675l-2-6h24l-1 3-8-1v8h22l-1-6-2.875.125C705 673 705 673 703 671c2.23-.027 4.458-.046 6.688-.063l3.761-.035c3.013.083 5.634.39 8.551 1.098v-2h-5l4-3 2 1 1-3c3.196-1.065 5.657-1.074 9-1l1 2-1 2h2a105.022 105.022 0 0 1 4 5l-1 2 2.238-.656c7.088-1.945 13.425-2.734 20.762-2.344l-4 2c3.929 1.851 6.988 2.22 11.313 2.125L774 676l-12-2v-2h7v2l1.88-.14c2.81-.199 5.62-.373 8.433-.548l2.958-.22 2.842-.166 2.619-.175c2.268.249 2.268.249 4.073 1.754L793 676l1.188-1.938c2.197-2.5 3.57-2.712 6.812-3.062l1 3 6 1 1-5c2.375.75 2.375.75 5 2l2 4h18c-1.722-3.248-1.722-3.248-5-4l1-4 7 2-2-4h-3v-2h-7l-1 6-4 1-1-10 2.938.063c2.937.293 2.937.293 4.062-1.063 2-.04 4-.043 6 0v2l3.36.184 4.39.254 2.21.119c5.594.33 5.594.33 8.096.963 2.096.6 2.096.6 4.944.48l-.965 1.715c-1.089 2.404-1.39 4.23-1.597 6.847-.228 2.759-.552 4.779-1.438 7.438-4.655.92-9.147 1.122-13.875 1.063l-2.086-.014c-1.68-.012-3.36-.03-5.039-.049l4 2c-4.47 2.98-9.59 4.712-15 4a113.158 113.158 0 0 1-5-3 124.952 124.952 0 0 0-6-2c-1.196 2.837-1.196 2.837-2 6l2 3-1.75 2c-3.946 5.262-6.588 10.375-7.25 17h-1v-5l-6-1-1 2-5-1-2-7h-3l1 3h-2l-1-2-1.875.625L775 700c-2.259-2.259-2.345-2.942-2.688-6l-.261-2.125C772 690 772 690 773 688l-3 1v-2h2l-1-4h3l-1-5-6 4-1.063-1.5c-2.871-2.223-5.403-1.629-8.937-1.5l-2-1 2 5-8-1v4l3.813-.563c3.014-.444 4.192-.435 7.187.563 1.125 7.75 1.125 7.75 0 10l5 1v3c-2.313-.25-2.313-.25-5-1l-1.25-2.125c-1.55-2.07-1.55-2.07-3.723-2.09-4.173.272-7.04.838-10.152 3.715-3.418 2.972-5.406 3.334-9.875 3.5-2.313-.25-2.313-.25-4-1l-2-3c-2.584-.25-2.584-.25-5 0l-1 3 17 3-2 7c-.17 2.792-.17 2.792 0 5-2.25-.087-4.5-.195-6.75-.313l-3.797-.175c-3.574-.53-5.122-.77-7.453-3.512-.61-3.137-.61-3.137-.75-6.688l</svg>`;

      expect(nft.updateSVG(svg)).to.be.revertedWith("SVG data too large");
    });

    it("should update the svg corectly", async function() {
      const {nft} = await loadFixture(deployNFT);

      const svg = `<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="lightblue" />
                    <circle cx="50" cy="50" r="30" fill="red" /><rect x="100" y="100" width="50" height="50" fill="green" />
                    <line x1="0" y1="200" x2="200" y2="0" stroke="black" stroke-width="2" /></svg>`;

      await nft.updateSVG(svg);

      expect(await nft.svgData()).to.be.equal(svg);
    })
  });

  describe("transferOwnership", function() {
    it("should revert if non-owner tries to call the function", async function() {
      const {nft, addr1, addr2} = await loadFixture(deployNFT);

      expect(nft.connect(addr2).transferOwnership(addr1)).to.be.revertedWithCustomError(
        nft,
        "OwnableUnauthorizedAccount"
      );
    })

    it("should transfer ownership to a new address", async function() {
      const { nft, addr1 } = await loadFixture(deployNFT);

      await nft.transferOwnership(addr1);

      expect(await nft.owner()).to.be.equal(addr1);
    })
  })
});